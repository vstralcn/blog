<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker中配置ubuntu16.04环境</title>
    <link href="/2025/03/18/Docker%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu16-04%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/03/18/Docker%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu16-04%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="因为学习堆的需要，所以需要配置低版本的ubuntu，记录一下配置路径"><a href="#因为学习堆的需要，所以需要配置低版本的ubuntu，记录一下配置路径" class="headerlink" title="因为学习堆的需要，所以需要配置低版本的ubuntu，记录一下配置路径"></a>因为学习堆的需要，所以需要配置低版本的ubuntu，记录一下配置路径</h2><h2 id="一、拉取ubuntu16-04镜像"><a href="#一、拉取ubuntu16-04镜像" class="headerlink" title="一、拉取ubuntu16.04镜像"></a>一、拉取ubuntu16.04镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker pull ubuntu:<span class="hljs-number">16.04</span><br>docker images 可以查看已拉取的镜像<br></code></pre></td></tr></table></figure><h2 id="二、启动镜像配置测试题目环境"><a href="#二、启动镜像配置测试题目环境" class="headerlink" title="二、启动镜像配置测试题目环境"></a>二、启动镜像配置测试题目环境</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">docker run ：创建一个新的容器并运行一个命令<br><span class="hljs-deletion">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="hljs-deletion">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><br><span class="hljs-deletion">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><br><span class="hljs-deletion">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><br><span class="hljs-deletion">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=<span class="hljs-string">&quot;b00ks&quot;</span> ubuntu:16.04<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">使用socat打开端口以便于访问题目<br>socat tcp-l:端口号，<span class="hljs-keyword">fork</span> <span class="hljs-keyword">exec</span>:程序位置，reuseaddr<br></code></pre></td></tr></table></figure><p><a href="https://www.hi-linux.com/posts/61543.html">Socat 入门教程 - 奇妙的 Linux 世界</a></p><p>或者使用集成化的pwn环境：</p><h2 id="1-pwndocker"><a href="#1-pwndocker" class="headerlink" title="1. pwndocker"></a>1. <strong><code>pwndocker</code></strong></h2><p><code>pwndocker</code> 是一个专为 CTF（Capture The Flag）比赛中的 PWN 题目设计的 Docker 环境，集成了多种常用工具，方便选手进行调试和开发。</p><p><strong>特点：</strong></p><ul><li><strong>工具集成</strong>：包含 <code>pwntools</code>、<code>pwndbg</code>、<code>gef</code>、<code>gdb-peda</code> 等常用调试和利用工具。</li><li><strong>多架构支持</strong>：兼容 x86、x86_64、ARM 等多种架构。</li><li><strong>易于使用</strong>：提供一键启动，减少环境配置的复杂性。</li></ul><p><strong>使用方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull skysider/pwndocker<br>docker run --<span class="hljs-built_in">rm</span> -it skysider/pwndocker<br></code></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><ul><li><a href="https://bbs.kanxue.com/thread-280028.htm?utm_source=chatgpt.com">看雪论坛</a></li></ul><p>pwndocker运行方法：</p><ol><li><pre><code class="hljs">[1] 运行pwndocker#先新建一个工作目录mkdir docker_pwncd docker_pwnvim run.sh#输入ctf_name=env_pwn #设置你环境文件夹的名字，这里取名为env_pwndocker run -d \    -h $&#123;ctf_name&#125; \    --name $&#123;ctf_name&#125; \    -v $(pwd)/$&#123;ctf_name&#125;:/ctf/work \    -p 23946:23946 \    --cap-add=SYS_PTRACE \ #这个一定要加，不然gdb调试不了    skysider/pwndockerdocker exec -it $&#123;ctf_name&#125; /bin/bash#进入docker环境</code></pre></li></ol><p><strong>docker run -itd -p 9999:9999 –name pwndocker skysider&#x2F;pwndocker:latest</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/16/github%E5%AF%B9%E6%8E%A5picgo/"/>
    <url>/2025/03/16/github%E5%AF%B9%E6%8E%A5picgo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github-PicGo实现博客系统"><a href="#hexo-github-PicGo实现博客系统" class="headerlink" title="hexo + github + PicGo实现博客系统"></a><strong>hexo + github + PicGo实现博客系统</strong></h1><p><a href="https://blog.csdn.net/clearloe/article/details/139879493">Hexo 博客搭建并部署到 GitHub Pages(2024最新详细版)_github pages上部署hexo-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/129455228">GitHub与PicGo搭建免费稳定图床并实现Typora内复制自动上传_typora复制的时候如何自动复制图片-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
